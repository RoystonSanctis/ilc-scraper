name: Build and Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build_and_release:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            artifact_name: ImpartusScraper.exe
            asset_name: impartus-scraper-windows.exe

          - os: ubuntu-18.04
            artifact_name: ImpartusScraper
            asset_name: impartus-scraper-linux

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 1

    - name: Set up Python 3.7
      uses: actions/setup-python@v2
      with:
        python-version: 3.7

    - name: Install Poetry
      uses: Gr1N/setup-poetry@v3

    - name: Get poetry cache dir
      id: poetry-cache-dir
      run: echo "::set-output name=dir::$(poetry config cache-dir)"

    - name: Cache Poetry virtualenv
      id: poetry-cache
      uses: actions/cache@v2
      with:
        path: ${{ steps.poetry-cache-dir.outputs.dir }}
        key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-poetry-

    - name: Install deps win
      if: runner.os == 'Windows'
      run: |
        # Download and extract FFmpeg, needs to be in PATH.
        # Copy it to poetry dir so that it can be cached
        # TODO: Compile ffmpeg manually to save space
        iwr https://github.com/ShareX/FFmpeg/releases/download/v4.3.1/ffmpeg-4.3.1-win64.zip -OutFile ffmpeg.zip
        Expand-Archive ffmpeg.zip -DestinationPath ${{ steps.poetry-cache-dir.outputs.dir }}
        echo "::add-path::${{ steps.poetry-cache-dir.outputs.dir }}"

    - name: Install deps ubuntu
      if: runner.os == 'Linux'
      run: |
        # TODO: Compile ffmpeg manually to save space
        sudo apt update
        sudo apt install -y ffmpeg pkg-config upx libgtk-3-dev
        echo "::set-env name=ILC_SCRAPER_UPX::1"

    - name: Setup virtualenv
      if: steps.poetry-cache.outputs.cache-hit != 'true'
      run: |
        # manually add wxpython wheel
        if [[ $RUNNER_OS == "Linux" ]]; then
          wx_ver=$(poetry show wxpython | awk '/^version/ {print $3}');
          poetry run pip install -f https://extras.wxpython.org/wxPython4/extras/linux/gtk3/${{ matrix.os }} "wxPython==$wx_ver";
        fi
        poetry install -E gui

    - name: Build file using pyinstaller
      run: poetry run pyinstaller build.spec

    - name: Upload to release
      if: startsWith(github.ref, 'refs/tags/v')
      uses: svenstaro/upload-release-action@v1-release
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: dist/${{ matrix.artifact_name }}
        asset_name: ${{ matrix.asset_name }}
        tag: ${{ github.ref }}
